#include<stdio.h>
#include<conio.h>
struct sparsematrix_node {
	int data;
	int row_value;
	int col_value;
	struct sparsematrix_node * next;
};
typedef struct sparsematrix_node* SPMNODE;
SPMNODE start = NULL;
SPMNODE createNode (int val, int row, int col) {
	SPMNODE temp = (SPMNODE)malloc(sizeof(struct sparsematrix_node));
	temp->data = val;
	temp->row_value = row;
	temp->col_value = col;
	temp->next = NULL;
	return temp;
} 
void addNode(int val, int row, int col) {
	SPMNODE node=createNode(val,row,col);
	SPMNODE temp=start;
	if(temp==NULL){
		start=node;
	}
	else{
		while(temp->next!=NULL){
			temp=temp->next;
		}
		temp->next=node;
	}
}
void displaySparseMatrix() {
	SPMNODE temp=start;
	printf("Row\tColumn\tValue\n");
	while(temp!=NULL){
		printf("%3d",temp->row_value);
		printf("\t");
		printf("%6d",temp->col_value);
		printf("\t");
		printf("%5d",temp->data);
		printf("\n");
		temp=temp->next;
	}
}
void main() {
	int rows,cols,i,j;
	int sparse_matrix[10][10];
	printf("Enter the row & column sizes of the sparse matrix : ");
	scanf("%d %d", &rows, &cols);
	for (i = 0; i < rows; i++) {
		for (j = 0; j < cols; j++) {
			printf("Enter the value of sparse_matrix[%d][%d] : ",i,j);
			scanf("%d", &sparse_matrix[i][j]);
		}
	}
	for (i = 0; i < rows; i++) {
		for (j = 0; j < cols; j++) {
			if(sparse_matrix[i][j]!=0)
				addNode(sparse_matrix[i][j],i,j);
		}
	}
	displaySparseMatrix();
}
