L11-1

struct node {
	int data;
	struct node *next;
};
typedef struct node * NODE;

NODE createAndAddNodes(NODE first) {
	NODE temp, q;
	int x;
	printf("Enter element : ");
	scanf("%d", &x);
	while(x != -1) {
		temp = (NODE)malloc(sizeof(struct node));
		temp->data = x;
		temp->next = NULL;
		if(first == NULL) {
			first = temp;
		} else {
			q->next = temp;
		}
		q = temp;
		printf("Enter element : ");
		scanf("%d", &x);
	}
	return first;  
}

NODE sort(NODE first) {
	// Write the code
	NODE t1,t2;
	int x;
	for(t1=first;t1->next!=NULL;t1=t1->next)
	
	{    for(t2=t1->next;t2!=NULL;t2=t2->next)
	    {   if(t2==NULL)
	        {
	       	  return first;
	        }
	        else{
	       
	         if(t1->data>t2->data){
	         	x=t1->data;
	        	t1->data=t2->data;
                t2->data=x;
	         }
	       	
	        }
	      
	  	}
	  
	}
	return first;

}

NODE add(NODE l3,int x) {
	// Write the code
	NODE t1=l3;
	NODE temp=(NODE)malloc(sizeof(struct node));
	temp->data=x;
	temp->next=NULL;
	if(l3==NULL){
		l3=temp;
	}
	else{
	  while(t1->next!=NULL){
	  	t1=t1->next;
	  }
	  t1->next=temp;
	}
	return l3;
}

NODE intersectionSLL(NODE l1,NODE l2) {
	// Write the code
	NODE t1=l1,t2=l2,l3;
	while(t1!=NULL && t2!=NULL){
		if(t1->data<t2->data){
			t1=t1->next;
		}
		else if(t1->data>t2->data){
			t2=t2->next;
		}
		else{
			l3=add(l3,t1->data);
			t1=t1->next;
			t2=t2->next;
			
		}
	}
	return l3;
	
	
}

void print(NODE first) {
	NODE q = first;
	if (first == NULL) {
		printf("Single Linked List is empty\n");
	} else {
		printf("Elements in the list are : ");
		while (q != NULL) {
			printf("%d---> ", q -> data);
			q = q -> next;
		}
		printf("NULL\n");
	}
}



L11-2


struct node {
	int data;
	struct node *next;
};
typedef struct node *NODE;

NODE createAndAddNodes(NODE first) {
	NODE temp, q;
	int x;
	printf("Enter element : ");
	scanf("%d", &x);
	while(x != -1) {
		temp = (NODE)malloc(sizeof(struct node));
		temp->data = x;
		temp->next = NULL;
		if(first == NULL) {
			first = temp;
		} else {
			q->next = temp;
		}
		q = temp;
		printf("Enter element : ");
		scanf("%d", &x);
	}
	return first;  
}

void print(NODE first) {
	NODE q = first;
	if (first == NULL) {
		printf("Single Linked List is empty\n");
	} else {
		printf("Elements in the list are : ");
		while (q != NULL) {
			printf("%d---> ", q->data);
			q = q->next;
		}
		printf("NULL\n");
	}
}

NODE concatenate(NODE t1, NODE t2) {
	// Write the code
	if(t1==NULL){
		return t2;
	}
	if(t2==NULL){
		return t1;
	}
	NODE t3=t1;
	while(t3->next!=NULL){
		t3=t3->next;
	}
	t3->next=t2;
	return t1;
	
}

NODE unionSLL(NODE l1, NODE l2) {
	// Write the code
	NODE l3=concatenate(l1,l2);
	NODE t1=l3;

	while(t1!=NULL)
	{
		NODE t2=t1;
		while(t2->next!=NULL){
			if(t1->data==t2->next->data){
				
			NODE q=t2->next;
			t2->next=q->next;
			free(q);
			}
			else
			{
				t2=t2->next;

			}
		}
		t1=t1->next;
	}
	return l3;
		
}


L11-3

struct node {
	int data;
	struct node *next;
};
typedef struct node * NODE;

NODE createAndAddNodes(NODE first) {
	NODE temp, q;
	int x;
	printf("Enter element : ");
	scanf("%d", &x);
	while(x != -1) {
		temp = (NODE)malloc(sizeof(struct node));
		temp->data = x;
		temp->next = NULL;
		if(first == NULL) {
			first = temp;
		} else {
			q->next = temp;
		}
		q = temp;
		printf("Enter element : ");
		scanf("%d", &x);
	}
	return first;  
}

NODE sort(NODE first) {
	// Write the code
	NODE t1,t2;
	int x;
	for(t1=first;t1->next!=NULL;t1=t1->next)
	  
	{    for(t2=t1->next;t2!=NULL;t2=t2->next)
	    {   if(t2==NULL)
	        {
	       	  return first;
	        }
	        else{
	       
	         if(t1->data>t2->data){
	         	x=t1->data;
	        	t1->data=t2->data;
                t2->data=x;
	         }
	       	
	        }
	      
	  	}
	  
	}
	return first;

}

NODE add(NODE l3,int x) {
	// Write the code
	NODE t1=l3;
	NODE temp=(NODE)malloc(sizeof(struct node));
	temp->data=x;
	temp->next=NULL;
	if(l3==NULL){
		l3=temp;
	}
	else{
	  while(t1->next!=NULL){
	  	t1=t1->next;
	  }
	  t1->next=temp;
	}
	return l3;
}

NODE intersectionSLL(NODE l1,NODE l2) {
	// Write the code
	NODE t1=l1,t2=l2,l3;
	while(t1!=NULL && t2!=NULL){
		if(t1->data<t2->data){
			t1=t1->next;
		}
		else if(t1->data>t2->data){
			t2=t2->next;
		}
		else{
			l3=add(l3,t1->data);
			t1=t1->next;
			t2=t2->next;
			
		}
	}
	return l3;
	
	
}

void print(NODE first) {
	NODE q = first;
	if (first == NULL) {
		printf("Single Linked List is empty\n");
	} else {
		printf("Elements in the list are : ");
		while (q != NULL) {
			printf("%d---> ", q -> data);
			q = q -> next;
		}
		printf("NULL\n");
	}
}
