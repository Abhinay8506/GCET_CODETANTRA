L9-1

struct node {
	int data;
	struct node *next;
};
typedef struct node *NODE;

NODE createNode() {
	NODE temp=(NODE)malloc(sizeof(NODE));
	return temp;
}

NODE insertAtBegin(NODE first, int x) {
	NODE temp;
	temp=createNode();
	if(temp!=NULL){
		temp->next=first;
		temp->data=x;
	}
	first=temp;
	return first;
}

int count(NODE first) {
	int count=0;
	NODE temp=first;
	if(first!=NULL){
		count=1;
		while(temp->next!=NULL){
			count++;
			temp=temp->next;
		}
		
	}
	return count;
}

void traverseList(NODE first) {
	NODE temp = first;
	while (temp != NULL) {
		printf("%d --> ",temp -> data);
		temp = temp -> next;
	}
	printf("NULL\n");
}

L9-2

struct node {
	int data;
	struct node *next;
};
typedef struct node *NODE;

NODE createNode() {
	NODE temp;
	temp = (NODE) malloc(sizeof(struct node));
	temp -> next = NULL;
	return temp;
}

NODE insertAtEnd(NODE first, int x) {
	NODE temp;
	temp=createNode();
	NODE t1=first;
	if(first==NULL){
		first=temp;
		temp->data=x;
		
	}
	else if(first!=NULL){
	   while(t1->next!=NULL){
	   	 t1=t1->next;
	   }
	   t1->next=temp;
	   temp->data=x;
	}
	return first;
	
		
}

void traverseList(NODE first) {
	NODE temp=first;
	while(temp!=NULL){
		printf("%d --> ",temp->data);
		temp=temp->next;
	}
	printf("NULL\n");
}

L9-3

struct node {
	int data;
	struct node *next;
};
typedef struct node *NODE;

NODE createNode() {
	NODE temp;
	temp = (NODE) malloc(sizeof(struct node));
	temp -> next = NULL;
	return temp;
}

NODE insertAtPosition(NODE first, int pos, int x) {
	NODE temp;
	temp=createNode();
	temp->data=x;
	NODE t2=first;
	for(int i=1;i<pos-1;i++){
		if(t2==NULL){
			printf("No such position in SLL so insertion is not possible\n");
			return first;
		}
		t2=t2->next;
	}
	if(pos==1){
		
		
			temp->next=first;
			first=temp;
		
	}
	else{
	   temp->next=t2->next;
	   t2->next=temp;
	}
	
	return first;
}

void traverseList(NODE first) {
	NODE temp=first;
    while(temp!=NULL){
    	printf("%d --> ",temp->data);
    	temp=temp->next;
    }
    printf("NULL\n");
}
