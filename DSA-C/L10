L10-1

struct node
{
    int data;
    struct node *next;
};
typedef struct node *NODE;

NODE createnode()
{
    NODE temp = (NODE)malloc(sizeof(struct node));
    temp->next = NULL;
    return temp;
}

NODE insertAtBegin(NODE first, int x)
{
    NODE temp = createnode();
    temp->data = x;
    temp->next = first;
    first = temp;
    return first;
}

NODE deleteAtBegining(NODE first)
{
    NODE temp = first;
    first = first->next;
    printf("The deleted element from SLL : %d\n", temp->data);
    free(temp);
    return first;
}

void traverseList(NODE first)
{
    NODE temp = first;
    while (temp != NULL)
    {
        printf("%d --> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

L10-2

struct node
{
    int data;
    struct node *next;
};

typedef struct node *NODE;

NODE createnode()
{
    NODE temp;
    temp = (NODE)malloc(sizeof(struct node));
    temp->next = NULL;
    return temp;
}

NODE insertAtEnd(NODE first, int item)
{
    NODE temp, cur;
    temp = createnode();
    temp->data = item;
    if (first == NULL)
    {
        return temp;
    }
    cur = first;
    while (cur->next != NULL)
    {
        cur = cur->next;
    }
    cur->next = temp;
    return first;
}

NODE deletAtEnd(NODE first)
{
    NODE cur, prev;
    if (first == NULL)
    {
        printf("List is empty\n");
        return first;
    }
    if (first->next == NULL)
    {
        printf("The deleted item from SLL : %d\n", first->data);
        free(first);
        return NULL;
    }
    prev = NULL;
    cur = first;
    while (cur->next != NULL)
    {
        prev = cur;
        cur = cur->next;
    }
    printf("The deleted item from SLL : %d\n", cur->data);
    free(cur);
    prev->next = NULL;
    return first;
}

void traverseList(NODE first)
{
    NODE temptemp = first;
    while (temp != NULL)
    {
        printf("%d --> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

L10-3

struct node
{
    int data;
    struct node *next;
};

typedef struct node *NODE;

NODE createnode()
{
    NODE temp;
    temp = (NODE)malloc(sizeof(struct node));
    temp->next = NULL;
    return temp;
}

NODE insertAtEnd(NODE first, int item)
{
    NODE temp, cur;
    temp = createnode();
    temp->data = item;
    if (first == NULL)
    {
        return temp;
    }
    cur = first;
    while (cur->next != NULL)
    {
        cur = cur->next;
    }
    cur->next = temp;
    return first;
}

NODE deleteatposition(NODE first,int pos)
{

    int count = 0;
    NODE temp;
    temp = first;
    while (temp != NULL)
    {
        count++;
        temp = temp->next;
    }
    if (pos > count)
    {
        printf("No such position in SLL so deletion is not possible\n");
        return first;
    }

    NODE cur,prev;
    if(pos==1)
    {
        cur=first;
        first=first->next;
        printf("The deleted item from SLL : %d\n", cur->data);
        free(cur);
        return first;
    }
    for(int i=1;i<pos;i++)
    {
        prev=cur;
        cur=cur->next;
    }
    prev->next=cur->next;
    printf("The deleted item from SLL : %d\n", cur->data);
    free(cur);
    return first;
}

void traverseList(NODE first)
{
    NODE temptemp = first;
    while (temp != NULL)
    {
        printf("%d --> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

L10-4

struct node
{
    int data;
    struct node *next;
};

typedef struct node *NODE;

NODE createnode()
{
    NODE temp;
    temp = (NODE)malloc(sizeof(struct node));
    temp->next = NULL;
    return temp;
}

NODE insertAtBegin(NODE first, int x)
{
    NODE temp = createnode();
    temp->data = x;
    temp->next = first;
    first = temp;
    return first;
}

int searchPosOfEle(NODE first, int item)
{
    NODE temp;
    int pos = 1;
    if (first == NULL)
    {
        return 0;
    }
    temp = first;
    while (temp != NULL)
    {
        if (temp->data == item)
            return pos;
        pos++;
        temp = temp->next;
    }
}

void traverseList(NODE first)
{
    NODE temptemp = first;
    while (temp != NULL)
    {
        printf("%d --> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}
