L10-1

struct node {
	int data;
	struct node *next;
};
typedef struct node *NODE;

NODE createNode() {
	NODE temp;
	temp = (NODE) malloc(sizeof(struct node));
	temp -> next = NULL;
	return temp;
}

NODE insertAtBegin(NODE first, int x) {
    NODE temp;
    temp=createNode();
    temp->data=x;
    if(temp!=NULL){
    	temp->next=first;
    	first=temp;
    }
    return first;
}

NODE deleteAtBegin(NODE first) {
    NODE temp;
    temp=first;
    first=first->next;
    printf("The deleted element from SLL : %d\n",temp->data);
    free(temp);
    return first;
}

void traverseList(NODE first) {
	NODE temp = first;
	while (temp != NULL) {
		printf("%d --> ",temp -> data);
		temp = temp -> next;
	}
	printf("NULL\n");
}


L10-2

struct node {
	int data;
	struct node *next;
};
typedef struct node *NODE;

NODE createNode() {
	NODE temp;
	temp = (NODE) malloc(sizeof(struct node));
	temp -> next = NULL;
	return temp;
}

NODE insertAtEnd(NODE first, int x) {
     NODE temp;
     NODE t=first;
     temp=createNode();
     temp->data=x;
     if(first==NULL){
     	return temp;
     }
     while(t->next!=NULL){
     	t=t->next;
     }
     t->next=temp;
     return first;
}

NODE deleteAtEnd(NODE first) {
    NODE l,p;
    l=p=first;
    if(first->next==NULL){
    	printf("The deleted item from SLL : %d\n",first->data);
    	first=NULL;
    	return first;
    }
    else{
    	while(l->next!=NULL){
    		p=l;
    		l=l->next;
    	}
    	p->next=NULL;
    	printf("The deleted item from SLL : %d\n",l->data);
    	free(l);
    }
    return first;
}

void traverseList(NODE first) {
	NODE temp = first;
	while (temp != NULL) {
		printf("%d --> ",temp -> data);
		temp = temp -> next;
	}
	printf("NULL\n");
}


L10-3

struct node {
	int data;
	struct node *next;
};
typedef struct node *NODE;

NODE createNode() {
	NODE temp;
	temp = (NODE) malloc(sizeof(struct node));
	temp -> next = NULL;
	return temp;
}

NODE insertAtEnd(NODE first, int x) {
   NODE temp,t;
   temp=createNode();
   temp->data=x;
   t=first;
   if(first==NULL){
   	  return temp;
   }
   else{
   	 while(t->next!=NULL){
   	 	t=t->next;
   	 }
   	 t->next=temp;
   }
   return first;
}

NODE deleteAtPosition(NODE first, int pos) {
		NODE p,l,t;
		p=t=l=first;
		int n=1;
		while(t->next!=NULL){
			n++;
			t=t->next;
		}
		if(pos>n){
			printf("No such position in SLL so deletion is not possible\n");
		}
		else{
			
		
		for(int i=1;i<=pos-1;i++){
			if(first==NULL){
				printf("Single Linked List is empty so deletion is not possible\n");
				return first;
			}
			p=l;
			l=l->next;
		}
		if(pos==1){
			first=first->next;
			printf("The deleted element from SLL : %d\n",l->data);
			free(l);
		}
		else{
			p->next=l->next;
			printf("The deleted element from SLL : %d\n",l->data);
			free(l);
		}
		}
		return first;
	
}

void traverseList(NODE first) {
	NODE temp = first;
	while (temp != NULL) {
		printf("%d --> ",temp -> data);
		temp = temp -> next;
	}
	printf("NULL\n");
}

L10-4

struct node {
	int data;
	struct node *next;
};
typedef struct node *NODE;

NODE createNode() {
	NODE temp;
	temp = (NODE) malloc(sizeof(struct node));
	temp -> next = NULL;
	return temp;
}

NODE insertAtBegin(NODE first, int x) {
	NODE temp;
	temp=createNode();
	temp->data=x;
	if(first==NULL){
		first=temp;
	}
	else{
	  temp->next=first;
	  first=temp;
	}
	return first;
}

int searchPosOfEle(NODE first, int key) {
	int count=0;
	NODE temp;
	if(first==NULL){
		return count;
	}
	temp=first;
	while(temp!=NULL){
		count++;
		if(temp->data==key){
			return count;
		}
		temp=temp->next;
	}
	
	
}

void traverseList(NODE first) {
	NODE temp = first;
	while (temp != NULL) {
		printf("%d --> ",temp -> data);
		temp = temp -> next;
	}
	printf("NULL\n");
}
